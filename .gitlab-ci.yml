image: python:3.7

stages:
  - check
  - test
  - deploy

.job_template: &install_deps
  before_script:
    # Install additional packages required for build
    - apt-get -qq update
    - apt-get -y -qq install git memcached libpcre3-dev libpq-dev > /dev/null
    # Install pipenv and lockfile depencencies
    - pip install -q --upgrade pip
    - pip install -q --upgrade --pre pipenv # use pre-release until pipenv check fix landed on master
    - pipenv install --ignore-pipfile --dev
    # Install node.js
    - curl -sL https://deb.nodesource.com/setup_11.x | bash -
    - apt-get install -y nodejs
    # Install yarn as outlined in (https://yarnpkg.com/lang/en/docs/install/#alternatives-stable)
    - curl -o- -L https://yarnpkg.com/install.sh | bash
    - export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"
    - yarn install --silent

.job_template: &deploy_ssh
  before_script:
    # Install and run ssh-agent if not already installed.
    - apt-get -qq update
    - 'which ssh-agent || ( apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - if [ "${SSH_PRIVATE_KEY}" ]; then ssh-add <(echo "$SSH_PRIVATE_KEY"); else echo "-----------  SSH_PRIVATE_KEY secret not configured. -----------"; exit 1; fi
    # For Docker builds, we disable host key checking.
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    # Install additional packages required for build
    - apt-get -y -qq install git memcached libpcre3-dev libpq-dev > /dev/null
    # Install pipenv and fabric (the only dependencies required for deployment)
    - pip install -q --upgrade pip pipenv
    - pipenv install --skip-lock fabric3 toml

variables:
  POSTGRES_DB: project_test_db
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: ""
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/pip-cache"

cache:
  paths:
    - .cache/pip
    - node_modules/
    - .yarn
  key: "$CI_PROJECT_ID"

check:
  <<: *install_deps
  stage: check
  script:
    - pipenv run flake8
    - pipenv run pipenv check
    - yarn lint
  when: on_success
  only:
    - branches

test-backend:
  <<: *install_deps
  services:
    - postgres
  stage: test
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  script:
    - cp .env.gitlab-ci.yaml .env.yaml
    - pipenv run pytest -c pytest.gitlab.ini
  when: on_success
  only:
    - branches
  artifacts:
    paths:
      - htmlcov/
    expire_in: 2 days

pages:
  stage: deploy
  dependencies:
    - test-backend
  script:
    - mv htmlcov/ public/
  artifacts:
    paths:
      - public
    expire_in: 30 days
  only:
    - master

deploy-test:
  <<: *deploy_ssh
  stage: deploy
  script:
    - pipenv run fab test deploy
  environment:
    name: test
  when: manual
  only:
    - develop

deploy-production:
  <<: *deploy_ssh
  stage: deploy
  script:
    - pipenv run fab production deploy
  environment:
    name: production
  when: manual
  only:
    - master
